class App extends React.Component {
  render() {
    return (
      <div>
        <h1>Pomodoro Clock (FCC)</h1>
        <Clock />
      </div>
    );
  }
}

class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      timeLeft: "25:00",
      started: false,
      clear: false,
      breakLength: "5",
      sessionLength: "25"
    };
    this.setBreakLength= this.setBreakLength.bind(this);
    this.setSessionLength= this.setSessionLength.bind(this);
    this.changeTime = this.changeTime.bind(this);
    this.runClock = this.runClock.bind(this);
    this.hasStarted = this.hasStarted.bind(this);
  }
  // run the clock time
  runClock(seconds) {
    if (this.state.started === true && Number(seconds)) {
      let minutes = Math.round((seconds - 30) / 60);
      let remainingSeconds = seconds % 60;
      if (remainingSeconds < 10) {
        remainingSeconds = "0" + remainingSeconds;
      }
      let result = minutes + ":" + remainingSeconds;
      if (seconds <= 0) {
        // stop when the seconds get to zero
        this.setState({
        timeLeft: "0:00",
         started: false
          
        });
        clearInterval();
      }else{
        this.setState({
        timeLeft: result
        });
      }
      
    }
    
  }
  setBreakLength(time) {
    this.setState({
      breakLength: time
    });
  }
  setSessionLength(time){
     this.setState({
      sessionLength: time
    });
  }
  changeTime(time) {
    this.setState({
      timeLeft: time
    });
  }
  hasStarted(isOn) {
    this.setState({
      started: isOn
    });
  }
  render() {
    return (
      <div>
        <TimeSetting 
          breakLength={this.state.breakLength}
          sessionLength={this.state.sessionLength}
          setBreakLength={this.setBreakLength}
          setSessionLength={this.setSessionLength}
          />
        <Display 
          sessionLength={this.state.sessionLength}
          timeLeft={this.state.timeLeft} 
          />
        <TimeFunctionality
          started = {this.state.started}
          hasStarted={this.hasStarted}
          runClock = {this.runClock}
          timeLeft={this.state.timeLeft} 
          changeTime ={this.changeTime}
          breakLength={this.state.breakLength}
          sessionLength={this.state.sessionLength}
          setBreakLength={this.setBreakLength}
          setSessionLength={this.setSessionLength}
        />
      </div>
    );
  }
}

class Display extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div id="display">
        <div id="timer-label">Session</div>
        <h1 id="time-left">{this.props.timeLeft}</h1>
      </div>
    );
  }
}
class TimeSetting extends React.Component {
  constructor(props){
    super(props);
    this.changeBreak = this.changeBreak.bind(this);
    this.changeSession = this.changeSession.bind(this);
  }
  changeBreak(e){
    let newBreak;
    if(e.target.id === "break-increment"){
      newBreak = Number(this.props.breakLength) + 1;
      if(newBreak <= 60){
         this.props.setBreakLength(String(newBreak));
      }
    }else if(e.target.id === "break-decrement"){
      newBreak = Number(this.props.breakLength) - 1;
      if(newBreak > 0){
         this.props.setBreakLength(String(newBreak));
      }
     
    }
    
  }
  changeSession(e){
    let newSession;
    if(e.target.id === "session-increment"){
      newSession = Number(this.props.sessionLength) + 1;
      if(newSession <= 60){
         this.props.setSessionLength(String(newSession));
      }
    }else if(e.target.id === "session-decrement"){
      newSession = Number(this.props.sessionLength) - 1;
      if(newSession > 0){
         this.props.setSessionLength(String(newSession));
      }
     
    }
  }
  render() {
    return (
      <div>
        <div id="break-session">
          <div id="break-info">
            <div id="break-label">Break Length</div>
            <div id="break-increment" onClick={this.changeBreak}>
              +
            </div>
            <div id="break-length">{this.props.breakLength}</div>
            <div id="break-decrement" onClick={this.changeBreak}>-</div>
          </div>
          <div id="session-info">
            <div id="session-label">Session Length</div>
            <div id="session-increment" onClick={this.changeSession}>+</div>
            <div id="session-length">{this.props.sessionLength}</div>
            <div id="session-decrement" onClick={this.changeSession}>-</div>
          </div>
        </div>
      </div>
    );
  }
}
class TimeFunctionality extends React.Component {
  constructor(props){
    super(props);
    this.resetClock = this.resetClock.bind(this);
    this.startClock = this.startClock.bind(this);
  }
  startClock() {
    // start-stop toggle
    if(this.props.started === true){
      this.props.hasStarted(false);
      // this.props.setSessionLength(this.props.timeLeft);
    }else{
      this.props.hasStarted(true);
    }
    // set this time equals to the time in the session length
    let x = Number(this.props.sessionLength)*60;
    setInterval(() => {
      this.props.runClock(String(x));
      x--;
    }, 1000);
  }
  resetClock(){
    this.props.changeTime("25:00");
    this.props.hasStarted(false);
    this.props.setBreakLength("5");
    this.props.setSessionLength("25");
  }
  render() {
    return (
      <div>
        <div id="functionality">
          <button id="start_stop" onClick={this.startClock}>
            Start
          </button>
          <button id="reset" onClick={this.resetClock}>
            Reset
          </button>
        </div>
      </div>
    );
  }
}

ReactDOM.render(<App />, document.getElementById("app"));
