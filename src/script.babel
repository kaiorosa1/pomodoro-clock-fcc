class App extends React.Component {
  render() {
    return (
      <div>
        <h1>Pomodoro Clock (FCC)</h1>
        <Clock />
      </div>
    );
  }
}

class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      timeLeft: "25:00",
      started: false,
      break: "5",
      session: "25"
    };
    this.getBreakValue= this.getBreakValue.bind(this);
    this.getSessionValue= this.getSessionValue.bind(this);
    this.changeTime = this.changeTime.bind(this);
    this.runClock = this.runClock.bind(this);
    this.hasStarted = this.hasStarted.bind(this);
  }
  // run the clock time
  runClock(seconds) {
    if (this.state.started === true && Number(seconds)) {
      let minutes = Math.round((seconds - 30) / 60);
      let remainingSeconds = seconds % 60;
      if (remainingSeconds < 10) {
        remainingSeconds = "0" + remainingSeconds;
      }
      let result = minutes + ":" + remainingSeconds;
      if (seconds == 0) {
        // stop when the seconds get to zero
        clearInterval();
      } 
      this.setState({
        timeLeft: result
      });
    }
    
  }
  getBreakValue(time) {
    this.setState({
      break: time
    });
  }
  getSessionValue(time){
     this.setState({
      session: time
    });
  }
  changeTime(time) {
    this.setState({
      timeLeft: time
    });
  }
  hasStarted(isOn) {
    this.setState({
      started: isOn
    });
  }
  render() {
    return (
      <div>
        <TimeSetting 
          getBreakTime={this.getBreakValue}
          getSessionTime={this.getSessionValue}
          />
        <Display 
          sessionTime={this.state.session}
          timeLeft={this.state.timeLeft} 
          />
        <TimeFunctionality
          runClock={this.runClock}
          changeTime={this.changeTime}
          started={this.state.started}
          isOn={this.hasStarted}
          breakTime={this.state.break}
          timeLeft={this.state.timeLeft}
          sessionTime={this.state.session}
          getBreakTime={this.getBreakValue}
          getSessionTime={this.getSessionValue}
        />
      </div>
    );
  }
}

class Display extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div id="display">
        <div id="timer-label">Session</div>
        <h1 id="time-left">{this.props.timeLeft}</h1>
      </div>
    );
  }
}
class TimeSetting extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      breakTime: "5",
      sessionTime: "25"
    }
    this.incrementTimeByOneBreak = this.incrementTimeByOneBreak.bind(this);
    this.decrementTimeByOneBreak = this.decrementTimeByOneBreak.bind(this);
    this.incrementTimeByOnePomodoro = this.incrementTimeByOnePomodoro.bind(this);
    this.decrementTimeByOnePomodoro = this.decrementTimeByOnePomodoro.bind(this);
  }
  incrementTimeByOneBreak() {
    let addBreakTime = Number(this.state.breakTime) + 1;
    this.setState({
        breakTime: addBreakTime
      });
    this.props.getBreakTime(addBreakTime);
  }
  decrementTimeByOneBreak() {
    let subtractBreakTime = Number(this.state.breakTime) - 1;
    if (subtractBreakTime >= 0) {
     this.setState({
        breakTime: subtractBreakTime
      });
    }
    this.props.getBreakTime(subtractBreakTime);
  }
  incrementTimeByOnePomodoro() {
    let addPomodoroTime = Number(this.state.sessionTime) + 1;
     this.setState({
        sessionTime: addPomodoroTime
      });
    this.props.getSessionTime(addPomodoroTime);
  }
  decrementTimeByOnePomodoro() {
    let subtractPomodoroTime = Number(this.state.sessionTime) - 1;
    if (subtractPomodoroTime >= 0) {
      this.setState({
        sessionTime: subtractPomodoroTime
      });
    }
    this.props.getSessionTime(subtractPomodoroTime);
  }
  render() {
    return (
      <div>
        <div id="break-session">
          <div id="break-info">
            <div id="break-label">Break Length</div>
            <div id="break-increment" onClick={this.incrementTimeByOneBreak}>
              +
            </div>
            <div id="break-length">{this.state.breakTime}</div>
            <div id="break-decrement" onClick={this.decrementTimeByOneBreak}>-</div>
          </div>
          <div id="session-info">
            <div id="session-label">Session Length</div>
            <div id="session-increment" onClick={this.incrementTimeByOnePomodoro}>+</div>
            <div id="session-length">{this.state.sessionTime}</div>
            <div id="session-decrement" onClick={this.decrementTimeByOnePomodoro}>-</div>
          </div>
        </div>
      </div>
    );
  }
}
class TimeFunctionality extends React.Component {
  constructor(props) {
    super(props);
    this.startClock = this.startClock.bind(this);
    this.resetClock = this.resetClock.bind(this);
  }
  startClock() {
    // start-stop toggle
    if(this.props.started === true){
      this.props.isOn(false);
      this.props.getSessionTime(this.props.timeLeft);
    }else{
      this.props.isOn(true);
    }
    // set this time equals to the time in the session length
    let x = Number(this.props.sessionTime)*60;
    setInterval(() => {
      this.props.runClock(x);
      x--;
    }, 1000);
  }
  resetClock() {
    this.props.isOn(false);
    this.props.getSessionTime("25");
    this.props.changeTime("25:00");
  }
  render() {
    return (
      <div>
        <div id="functionality">
          <button id="start_stop" onClick={this.startClock}>
            Start
          </button>
          <button id="reset" onClick={this.resetClock}>
            Reset
          </button>
        </div>
      </div>
    );
  }
}

ReactDOM.render(<App />, document.getElementById("app"));
